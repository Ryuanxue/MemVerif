CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_53a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_53c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_53b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_53d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_32.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_52c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_52a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_52b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_09.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_loop_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_ncpy_51b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_05.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_07.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_10.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_41.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memmove_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_44.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_66a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_loop_66b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_14.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_65b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_65a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_08.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_ncpy_16.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_63b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_63a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memmove_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_64b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memcpy_64a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_31.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_06.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_loop_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_ncpy_13.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_memcpy_12.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_cpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memmove_45.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_34.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_67b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_declare_cpy_67a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_54d.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_54b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_54c.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_54a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_ncpy_54e.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_68b.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_68a.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_18.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_declare_memcpy_15.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_cpy_11.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_wchar_t_alloca_memmove_17.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_65a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_65b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memcpy_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_53b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_53c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_53d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_53a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_68a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_68b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_66b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_66a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_66b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_66a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_65b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_65a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_12.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_declare_memmove_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_52a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_52b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_52c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_51b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_51a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_08.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_declare_memcpy_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_67b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_67a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_51a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_51b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memcpy_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_char_memcpy_54c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_54d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_54e.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_54b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_54a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_05.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_declare_loop_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_54d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_54e.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_54a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_54b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_54c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_01.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_memcpy_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_67a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_67b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_11.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_17.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_memmove_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_64a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_64b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_68b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_68a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_68a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_68b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_66b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_66a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_15.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_declare_memmove_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__char_declare_loop_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_66b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_66a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_51a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_51b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_51b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_51a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_03.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memcpy_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_52b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_52c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_52a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_66a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_66b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_63b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_63a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_53a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_53c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_53b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_53d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_54b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_54e.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_54a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_54d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_54c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_66b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_66a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_63a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_63b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_52b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_52a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_52c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_16.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_07.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_declare_memcpy_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_64b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_64a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_54d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_54c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_54e.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_54b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_54a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memmove_52c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_52b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_52a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_09.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__malloc_char_memmove_65b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_65a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_04.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_memcpy_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_63b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_63a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_64b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_64a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memcpy_63b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_63a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__char_declare_loop_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_65b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_65a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_67a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_67b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_char_memmove_51a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_51b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_54c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_54a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_54d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_54b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_54e.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_64a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_64b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_53d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_53b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_53c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_53a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_52a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_52b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_52c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_64a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_64b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_06.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_memcpy_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_14.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_67b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_67a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memmove_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__char_alloca_memmove_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_64a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_64b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_68a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_68b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_63b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_63a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_54b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_54a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_54e.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_54c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_54d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_18.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_loop_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__wchar_t_declare_loop_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memmove_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_char_memcpy_67b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_67a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memmove_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memcpy_68b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_68a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_13.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__malloc_char_memcpy_53b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_53d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_53c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_53a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_loop_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_68b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_68a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_10.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_65a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_65b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_63a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_63b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memcpy_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_strncpy_02.c
 *    GoodSink: Copy a string using wcsncpy() with explicit null termination

 *    BadSink : Copy a string using wcsncpy() without explicit null termination



########
CWE126_Buffer_Overread__wchar_t_declare_loop_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_51b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_51a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_memmove_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_loop_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_loop_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_67b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_67a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_loop_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_memcpy_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_65b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_65a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_loop_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_memcpy_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_52c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_52a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_52b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_53b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_53a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_53d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_53c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_53d.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_53c.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_53a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_53b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_alloca_memmove_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_alloca_memmove_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__char_declare_memmove_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__char_declare_loop_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__char_declare_loop_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_char_declare_cat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_alloca_cpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_wchar_t_declare_cpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fgets_65b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_65a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_63b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_63a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_32.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_18.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_54d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_54a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_54b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_54c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_54e.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_53d.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_53b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_53a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_53c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_negative_14.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fscanf_45.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_07.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_negative_15.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fscanf_13.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fgets_52a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_52b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_52c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fgets_10.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_negative_16.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_12.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_negative_65a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_65b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_rand_63a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_63b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_52b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_52a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_52c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_61a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_61b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_05.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__char_declare_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_connect_socket_14.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_51b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_51a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_01.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_negative_04.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_64a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_64b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_53b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_53d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_53c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_53a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__CWE839_listen_socket_08.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fgets_51b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_51a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_negative_03.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_18.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_rand_16.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fscanf_67a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_67b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_68b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_68a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fgets_54b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_54d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_54c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_54a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_54e.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_11.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fscanf_04.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_rand_51a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_51b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fscanf_54e.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_54c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_54d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_54a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_54b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fscanf_14.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_04.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_45.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fgets_01.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_54c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_54e.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_54b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_54d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_54a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_05.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_01.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_64a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_64b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fscanf_31.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_51b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_51a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_negative_63b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_63a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fgets_05.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_connect_socket_44.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_41.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_negative_10.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_connect_socket_45.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_68b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_68a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_08.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_66a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_66b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_42.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_11.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_03.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_15.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_listen_socket_11.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_12.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_31.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_68a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_68b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_63a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_63b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_16.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_negative_07.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_66b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_66a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_rand_17.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_negative_06.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_negative_64a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_64b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_63a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_63b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_66a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_66b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_08.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_rand_66a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_66b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_64b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_64a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_negative_53d.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_53c.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_53a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_53b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_rand_67b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_67a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_negative_17.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_12.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_41.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_66a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_66b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_41.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_44.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_03.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fgets_67a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_67b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_rand_08.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_61b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_61a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_16.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_64a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_64b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_51a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_51b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_63a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_63b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_negative_41.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_06.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_54c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_54a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_54e.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_54b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_54d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_12.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_16.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_07.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fscanf_65b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_65a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_10.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_52a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_52b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_52c.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fgets_07.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fgets_13.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_10.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fscanf_05.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_listen_socket_65b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_65a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_45.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fgets_68b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_68a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_listen_socket_18.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_rand_53c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_53b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_53d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_53a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__char_declare_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_14.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_negative_44.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_01.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_06.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fscanf_32.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_45.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_61a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_61b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fgets_66b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_66a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_52b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_52a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_52c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_listen_socket_10.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_67b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_67a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fgets_22a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_22b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_17.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_68a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_68b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_42.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_54c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_54e.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_54b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_54a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_54d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_04.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__CWE839_rand_32.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_negative_54a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_54b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_54d.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_54c.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_54e.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__char_alloca_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_14.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_22b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_22a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fscanf_22b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_22a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_34.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fscanf_02.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_45.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fscanf_06.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_04.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_42.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_31.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_22a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_22b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_02.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_52b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_52c.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_52a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fgets_61b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_61a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_22a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_22b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_21.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_17.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_04.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_16.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_03.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_rand_03.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_52a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_52b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_52c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_31.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_13.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_31.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_42.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_34.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_17.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_32.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_listen_socket_44.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_63a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_63b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_05.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_char_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_51b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_51a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fgets_21.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__CWE839_negative_13.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fgets_14.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_66b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_66a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_rand_05.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_connect_socket_64a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_64b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_32.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_65a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_65b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_rand_22b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_22a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fgets_12.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_negative_09.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_65a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_65b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fgets_34.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_09.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_15.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_31.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_53d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_53b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_53c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_53a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fgets_08.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__char_declare_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fgets_17.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_67a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_67b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_03.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_65a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memcpy_65b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_12.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_rand_18.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_07.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_42.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_08.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_21.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_negative_02.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fscanf_07.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_21.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fgets_45.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_15.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__char_declare_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_rand_13.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_fgets_44.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_listen_socket_09.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fscanf_44.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_01.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_67b.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__wchar_t_declare_memmove_67a.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_rand_41.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_02.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_42.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fgets_02.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_01.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fgets_06.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_09.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fscanf_18.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_09.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_68b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_68a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_fgets_18.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_64a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_64b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_13.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_connect_socket_02.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_53d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_53b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_53c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_listen_socket_53a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fscanf_34.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_listen_socket_34.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_negative_11.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__CWE839_negative_67b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_67a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_68a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_68b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_negative_61a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_61b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_alloca_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_declare_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_10.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_11.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_alloca_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_rand_11.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_alloca_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__char_declare_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_fgets_32.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__char_declare_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_connect_socket_06.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_15.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_09.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_negative_51a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_negative_51b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__malloc_char_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__CWE839_fscanf_41.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_alloca_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__char_declare_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__CWE839_listen_socket_21.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__CWE839_rand_61a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_rand_61b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__CWE839_connect_socket_15.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_52b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_52a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fscanf_52c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__CWE839_negative_34.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__char_alloca_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_fgets_53d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_53a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_53b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__CWE839_fgets_53c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_alloca_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__CWE839_rand_21.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking to see if the value is negative



########
CWE127_Buffer_Underread__char_declare_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__char_declare_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_declare_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__wchar_t_alloca_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_alloca_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_17.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_17.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_17.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_09.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_42.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_10.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_64a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_65a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_67a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_67b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_67a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_34.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_10.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_32.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_15.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_18.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_18.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_04.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_08.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_13.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_34.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_09.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_13.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_32.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_31.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_63b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_10.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_42.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_15.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_44.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_10.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_03.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_10.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_31.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_66a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_09.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_31.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_34.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_31.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_04.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_31.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_32.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_42.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_14.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_12.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_65a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_45.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_51b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_42.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_65a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_52a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_52c.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_52b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_68b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_34.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_14.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_68b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_16.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_13.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_10.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_22a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_14.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_66b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_22a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_04.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_45.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_02.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_34.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_17.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_17.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_10.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_04.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_05.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_67a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_66a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_22a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_05.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_12.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_15.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_02.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_68b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_63b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_67b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_11.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_32.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_42.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_66b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_51b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_31.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_45.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_01.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_52a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_67a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54e.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_54c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_34.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_02.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_03.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_13.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_44.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_03.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_16.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_07.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_34.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_34.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_63a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_02.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54e.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_54c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_08.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_31.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_06.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_12.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_22a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_14.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_21.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_12.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_21.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_15.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_45.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_12.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_16.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_11.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_15.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_63a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_65a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_61a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_31.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_04.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_13.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_53c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_68a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_45.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_03.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_18.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_21.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_15.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_21.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_09.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_41.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_64a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_64b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_66a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_05.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54e.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_54c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_53a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_53b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_53d.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_53c.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_16.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_41.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_22b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_22a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_05.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_67a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_12.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_08.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_11.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_44.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_61a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_51b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_64b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_01.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_03.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_52c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_65a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_51a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_18.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_11.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_07.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_44.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_17.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_18.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_64b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_06.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_68b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_05.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_04.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_07.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_10.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_04.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_42.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_42.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_06.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_13.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_11.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_21.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_32.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54e.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_54c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_44.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_41.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_16.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_11.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_41.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_41.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_21.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_01.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_07.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_07.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_09.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_01.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_17.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_45.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_66b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_65a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_54b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_54e.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_54d.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_54c.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_54a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_07.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_16.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_52c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_02.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_52b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_16.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_41.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_13.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_44.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_22a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_41.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_15.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_08.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_44.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_12.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_53a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_51b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_21.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_07.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_16.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_63b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_15.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_15.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_22a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_22b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_53c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_04.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_03.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_42.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_09.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_64a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_08.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_06.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_02.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_45.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_09.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54e.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54d.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_54b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_01.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_02.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_44.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_53a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_34.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_64b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_02.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_18.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_06.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_08.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_03.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_31.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_08.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_07.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_13.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_22a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_68b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_45.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_45.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_21.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_10.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_05.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_51b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_51a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_08.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_32.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_05.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_03.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_68a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_61a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_61b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_21.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_08.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_14.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_05.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_03.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_32.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_52a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_07.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_13.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_67a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_18.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_04.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_09.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54e.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_54c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_14.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_07.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_51a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_52b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_14.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_01.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_14.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_34.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_08.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_18.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_53d.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_22b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_64b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_17.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_15.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_09.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_61a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_13.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_21.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_45.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_41.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_05.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_11.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_11.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_32.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_42.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_41.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_05.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_31.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_02.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_12.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_12.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_53a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_02.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_06.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_01.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_66a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_45.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_09.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_03.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_61a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_61b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_01.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_63a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_14.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_11.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_34.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_06.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_32.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_06.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_10.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_17.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_12.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_01.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_18.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_44.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_04.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_14.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE135_11.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_65a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_44.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_42.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_22a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_22b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE127_Buffer_Underread__malloc_char_cpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_11.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_12.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_char_memcpy_34.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_42.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_21.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_09.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_22a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_22b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_07.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_04.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_61b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_61a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_31.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_21.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_15.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_31.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_18.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_31.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memmove_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_61b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_61a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_10.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_32.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_02.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE126_Buffer_Overread__malloc_char_memmove_11.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_34.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_22a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_22b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_10.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_05.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_17.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_21.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_03.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_41.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE127_Buffer_Underread__malloc_char_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_34.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_44.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_09.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE127_Buffer_Underread__malloc_char_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_22b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_22a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_09.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_loop_12.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_char_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_61b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_61a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_09.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_10.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_34.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_12.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_09.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_04.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_03.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_06.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_17.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_21.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_18.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__malloc_char_loop_22b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_22a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_22b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_14.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_45.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_18.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_18.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE126_Buffer_Overread__malloc_char_loop_44.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_04.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_08.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_32.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_17.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_13.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_char_memcpy_11.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_07.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_45.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_09.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_07.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_32.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_16.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_14.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_14.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_45.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_14.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE127_Buffer_Underread__malloc_char_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_05.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_01.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_42.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_22a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_22b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_09.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_02.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_11.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_22b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_22a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_02.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_char_memmove_08.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_31.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_13.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_34.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_16.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_09.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_08.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_13.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE126_Buffer_Overread__malloc_char_memcpy_13.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_01.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE127_Buffer_Underread__malloc_char_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memmove_22a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_22b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__malloc_char_loop_08.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_01.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__malloc_char_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_05.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_12.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE127_Buffer_Underread__malloc_char_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_10.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memmove_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_01.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_16.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_12.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_17.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_05.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_44.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_18.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_44.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_15.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_18.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_14.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_15.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_16.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_05.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE127_Buffer_Underread__malloc_char_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_char_memcpy_05.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_loop_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_loop_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE126_Buffer_Overread__malloc_char_memmove_45.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_09.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE127_Buffer_Underread__malloc_char_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_05.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_04.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE127_Buffer_Underread__malloc_char_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE127_Buffer_Underread__malloc_char_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_15.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_31.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_18.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_09.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_06.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_08.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_32.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_12.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE126_Buffer_Overread__malloc_char_memmove_44.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_04.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_12.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_13.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_13.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE126_Buffer_Overread__malloc_char_memmove_04.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_03.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_18.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_13.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_loop_17.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_44.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_21.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_01.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_08.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_loop_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_22a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_22b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_11.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_32.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_04.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_11.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memmove_01.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_34.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_45.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_61a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_06.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_05.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_31.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_loop_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_05.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_char_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_07.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_07.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE127_Buffer_Underread__malloc_char_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_16.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_char_loop_13.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_08.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_14.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_32.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_21.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_10.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_03.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_06.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_11.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_02.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_10.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_ncpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_44.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_12.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_10.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_memcpy_04.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_34.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_02.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_14.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_char_memmove_41.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_01.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE126_Buffer_Overread__malloc_char_memcpy_42.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_41.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_10.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_16.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE127_Buffer_Underread__malloc_char_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_06.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE126_Buffer_Overread__malloc_char_memcpy_41.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_char_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_04.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_42.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_02.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_34.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_03.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_04.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE127_Buffer_Underread__malloc_char_memmove_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_10.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE124_Buffer_Underwrite__malloc_char_loop_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_41.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_memcpy_44.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_18.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_42.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE127_Buffer_Underread__malloc_char_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_02.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE127_Buffer_Underread__malloc_char_memmove_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE127_Buffer_Underread__malloc_char_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_21.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_char_memmove_12.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_char_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_05.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE127_Buffer_Underread__malloc_char_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_15.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_31.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_char_loop_05.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memmove_42.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_cpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_08.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_15.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_42.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_06.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_18.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_02.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__malloc_char_memmove_21.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_07.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_44.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_61a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_61b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE127_Buffer_Underread__malloc_char_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_61b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_61a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_06.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_13.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE126_Buffer_Overread__malloc_char_loop_41.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_03.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_16.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_01.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_11.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_loop_03.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_02.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE126_Buffer_Overread__malloc_char_memmove_15.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_42.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_06.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_char_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_08.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_15.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_01.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_loop_45.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_08.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE124_Buffer_Underwrite__malloc_char_memmove_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_17.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE126_Buffer_Overread__malloc_char_loop_15.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_01.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_03.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE126_Buffer_Overread__malloc_char_memmove_32.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE127_Buffer_Underread__malloc_char_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_13.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_12.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE126_Buffer_Overread__malloc_char_loop_31.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_21.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_char_cpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_45.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_45.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_61a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_61b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_char_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_char_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__malloc_char_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_41.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_34.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_42.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_ncpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_ncpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE126_Buffer_Overread__malloc_char_memmove_61a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_61b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_45.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE127_Buffer_Underread__malloc_char_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_char_loop_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_17.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_41.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE127_Buffer_Underread__malloc_char_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_41.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_32.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE127_Buffer_Underread__malloc_char_loop_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_17.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_14.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_loop_18.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strncpy



########
CWE127_Buffer_Underread__malloc_char_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memcpy_17.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_17.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_loop_06.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__malloc_char_memmove_13.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_char_memmove_14.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_22b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_22a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_07.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_06.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE127_Buffer_Underread__malloc_char_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__malloc_char_loop_14.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__malloc_char_loop_10.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE127_Buffer_Underread__malloc_char_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_21.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE127_Buffer_Underread__malloc_char_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_16.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_10.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE126_Buffer_Overread__malloc_char_memmove_31.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_loop_61b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_61a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_03.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE127_Buffer_Underread__malloc_char_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_char_memmove_03.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__malloc_char_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using strcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memcpy_07.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_wchar_t_memmove_01.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_02.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_09.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE126_Buffer_Overread__malloc_char_loop_02.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_32.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_11.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_06.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__malloc_char_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_char_memcpy_61b.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE126_Buffer_Overread__malloc_char_memcpy_61a.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__malloc_char_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE127_Buffer_Underread__malloc_wchar_t_cpy_42.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__malloc_wchar_t_loop_07.c
 * BadSource:  Use a small buffer

 * GoodSource: Use a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_negative_67b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_67a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_42.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_54c.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_54a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_54b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_54e.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_54d.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_11.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_17.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_rand_02.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_16.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_01.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_65b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_65a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_09.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_rand_61a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_61b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_05.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_negative_68b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_68a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_rand_12.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_52a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_52c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_52b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_negative_15.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_01.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_08.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_64a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_64b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_18.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_64a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_64b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_41.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_rand_21.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_15.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_16.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_22a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_22b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_04.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_negative_12.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_68b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_68a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_rand_45.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_65b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_65a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_negative_61a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_61b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_rand_22b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_22a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_negative_14.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_09.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_54d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_54b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_54e.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_54c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_54a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_32.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_rand_18.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_05.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_10.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_negative_42.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_rand_14.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_rand_31.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_03.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_51b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_51a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_08.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_03.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_34.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_34.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_06.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_negative_10.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_51b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_51a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_06.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_66a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_66b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_02.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__CWE839_rand_07.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_rand_17.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__malloc_char_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_negative_31.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_53c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_53a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_53b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_53d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_67a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_67b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_rand_04.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_negative_52a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_52b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_52c.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_rand_41.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_negative_63b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_63a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_char_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_negative_07.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_negative_11.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_negative_21.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__malloc_char_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_13.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_53a.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_53b.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_53c.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_53d.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_rand_66a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_66b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_32.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_rand_63a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_63b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_negative_44.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_rand_44.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_char_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_negative_13.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_negative_45.c
 * BadSource: negative Negative index value

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__malloc_char_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__malloc_char_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_char_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__malloc_wchar_t_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memmove_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_loop_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_snprintf_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memmove_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_ncat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_memcpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_ncpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_ncpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_15.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_18.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_09.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_15.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_05.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_08.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_14.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_34.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_11.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_13.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_04.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_68a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_68b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_12.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_17.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_04.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_09.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_14.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_03.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_03.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_67a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_67b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_08.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_66a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_66b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_12.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_44.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_07.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_41.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_65b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_65a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_18.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_05.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_64b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_64a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_11.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_32.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_31.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_04.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_17.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_09.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_18.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_14.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_10.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_10.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_04.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_03.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_12.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_06.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_11.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_01.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_16.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_07.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_02.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_05.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_05.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_15.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_03.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_15.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_04.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_01.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_03.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_22a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_22b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_01.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_08.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_10.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_18.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_08.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_02.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_16.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_14.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_17.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_18.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_54b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_54e.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_54a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_54d.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_54c.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_07.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_04.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_14.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_17.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_10.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_09.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_07.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_04.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_01.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_13.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_02.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_06.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_14.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_08.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_18.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_11.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_06.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_08.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_01.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_06.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_16.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_02.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_18.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_17.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_10.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_01.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_05.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_07.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_16.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_11.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_07.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_12.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_17.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_03.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_02.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_15.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_31.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_05.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_17.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_12.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_10.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_63a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_63b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_03.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_15.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_13.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_09.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_12.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_09.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_07.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_17.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_13.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_53d.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_53b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_53a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_53c.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_05.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_51a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_51b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_13.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_06.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_03.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_05.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_11.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_02.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_06.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_09.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_52b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_52c.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_52a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_16.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_09.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_15.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_08.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_16.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_14.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_14.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_13.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_10.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_06.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_02.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memcpy_04.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_07.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memcpy_13.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_11.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__char_type_overrun_memmove_02.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_42.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_declare_snprintf_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_18.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memmove_10.c
 *    GoodSink: Perform the memmove() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_declare_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__wchar_t_type_overrun_memcpy_11.c
 *    GoodSink: Perform the memcpy() and prevent overwriting part of the structure

 *    BadSink : Overwrite part of the structure by incorrectly using the sizeof(struct) in memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_01.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_21.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_13.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_wchar_t_alloca_snprintf_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using swprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54e.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_54a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_63a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_66a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_listen_socket_61a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_61a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_52b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_67b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_61a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_53b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_65a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fscanf_61b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_61a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_61b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_68b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_64b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_51b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memmove_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54e.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_54a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_64a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_65a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_65b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54e.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_54b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_68a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_68b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_53d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_67a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_67b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_52a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_52b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_52c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_65a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_65b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_51a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_51b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_66a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_66b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_63a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_63b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_64a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_64b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_68a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_52a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_52b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_52c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_63b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_51b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_67a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_67b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_snprintf_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_snprintf_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_loop_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_declare_cat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_loop_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_ncpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_declare_cat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memmove_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memmove_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_ncat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_char_declare_snprintf_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_alloca_memcpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcat



########
CWE121_Stack_Based_Buffer_Overflow__dest_wchar_t_alloca_cpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_memcpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE806_wchar_t_declare_ncpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_52a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_52b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_52c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fgets_14.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_52a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_52c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_52b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_08.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_listen_socket_68a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_68b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_67b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_67a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_10.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_12.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fgets_11.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_34.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_listen_socket_21.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_memcpy_16.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_memcpy_07.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_large_63b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_63a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_61b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_61a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_10.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_memcpy_13.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_connect_socket_65b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_65a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_loop_03.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_fgets_12.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_rand_63a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_63b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_char_loop_12.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_17.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_17.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fgets_61a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_61b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_14.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fscanf_53b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_53c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_53d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_53a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_large_03.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_06.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_listen_socket_03.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_05.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__char_alloca_loop_14.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_07.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_rand_22b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_22a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_17.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_rand_07.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_67a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_67b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fscanf_65b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_65a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_large_02.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_45.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_64a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_64b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_17.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_large_22b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_22a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_12.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_68a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_68b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_01.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_53a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_53b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_53c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_53d.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_char_memcpy_01.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fgets_68b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_68a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_41.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_22a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_22b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_07.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_07.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fscanf_42.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__char_alloca_loop_11.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_54a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_54d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_54b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_54e.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_54c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_09.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_large_42.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_listen_socket_34.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_21.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_41.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fgets_01.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_memcpy_05.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_rand_03.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_13.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fgets_53b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_53d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_53a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_53c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_03.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_08.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE129_large_54e.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_54c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_54b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_54d.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_54a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_15.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_04.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_51b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_51a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fgets_06.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_07.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE129_listen_socket_09.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fgets_04.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fscanf_32.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_13.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_large_21.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_44.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_memcpy_02.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fscanf_17.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_44.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_large_64a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_64b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_large_13.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_52a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_52c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_52b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_66a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_66b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_09.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_14.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__CWE129_fgets_03.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_rand_18.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_05.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_connect_socket_13.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_12.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_66a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_66b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_63b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_63a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fscanf_13.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_42.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_02.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_rand_17.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fgets_54d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_54c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_54e.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_54b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_54a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_rand_13.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_strncpy_12.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE129_rand_65b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_65a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_char_memcpy_08.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_large_05.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_03.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_44.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_53b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_53a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_53c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_53d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_char_strncpy_10.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fscanf_63b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_63a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_03.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fgets_13.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_31.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_15.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fscanf_08.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_34.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_11.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_memcpy_04.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_large_08.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_34.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_rand_45.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_02.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__char_alloca_loop_31.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_rand_16.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fscanf_04.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_char_memcpy_03.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_01.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_strncpy_18.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_rand_41.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fgets_31.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_02.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_41.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_16.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fscanf_45.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_08.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_18.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE129_large_01.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fscanf_03.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_09.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_65b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_65a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_06.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_06.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_loop_13.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_10.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_connect_socket_32.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_rand_02.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_char_loop_02.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_large_34.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_04.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_18.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_rand_32.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_44.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__char_alloca_loop_04.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_04.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_65b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_65a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_11.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_large_16.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fscanf_21.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_34.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_loop_01.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_memcpy_06.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_loop_16.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_large_52b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_52c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_52a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_rand_01.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_loop_18.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_04.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_12.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_rand_10.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_18.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_61b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_61a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_67b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_67a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fscanf_18.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_large_45.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_11.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fgets_45.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_char_strncpy_02.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_06.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_16.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_10.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_44.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_char_memcpy_15.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_12.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fscanf_22b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_22a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_41.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_02.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_41.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_14.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_rand_11.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fgets_16.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_loop_17.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE129_connect_socket_31.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_15.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_44.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_memcpy_18.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__char_alloca_loop_09.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fgets_15.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_char_loop_06.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_strncpy_16.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_05.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fgets_17.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_02.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_17.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_listen_socket_17.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_large_51b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_51a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_04.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fgets_18.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_loop_14.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_rand_51b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_51a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_03.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_strncpy_08.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_memcpy_17.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_08.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_01.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__char_alloca_loop_10.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_fgets_09.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__CWE170_char_loop_09.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_loop_05.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE129_large_68b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_68a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_14.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__char_alloca_loop_15.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_10.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_fscanf_01.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_13.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE129_listen_socket_53a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_53b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_53c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_53d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__CWE129_listen_socket_64a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_64b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_16.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_fgets_05.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_61b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_61a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_char_strncpy_15.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_rand_52c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_52b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_52a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_09.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_05.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_06.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_44.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_08.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_16.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fscanf_68b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_68a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_03.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__char_alloca_loop_32.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_char_loop_10.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_51a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_51b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_66b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_66a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_large_41.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_08.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_64b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_64a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_52a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_52c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_52b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_65a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_65b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__char_alloca_loop_13.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE129_listen_socket_04.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_14.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_01.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__char_alloca_loop_06.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_14.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_loop_18.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE129_fscanf_66b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_66a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_06.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_11.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE129_connect_socket_61b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_61a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_45.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_memcpy_10.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__char_alloca_loop_34.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_22a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_22b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_07.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fscanf_09.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_32.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_char_loop_15.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_loop_11.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_rand_54c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_54a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_54d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_54b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_54e.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fscanf_31.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_02.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fgets_32.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_connect_socket_42.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_12.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_04.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_01.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fscanf_67a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_67b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_32.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_14.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_rand_06.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_21.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_31.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_rand_68b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_68a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_12.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__char_alloca_loop_02.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE126_Buffer_Overread__CWE129_listen_socket_16.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_large_17.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_loop_04.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_54c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_54a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_54d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_54e.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_54b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_42.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE170_char_strncpy_01.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_loop_13.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fscanf_05.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_64b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_64a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_memcpy_09.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_large_10.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_large_18.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_61a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_61b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_12.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE126_Buffer_Overread__CWE129_connect_socket_53a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_53b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_53d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_53c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_66b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_66a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_listen_socket_11.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_54e.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_54d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_54a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_54b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_54c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_rand_15.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_char_memcpy_14.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_15.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE170_char_loop_07.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE170_char_strncpy_06.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_strncpy_14.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_memcpy_12.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_fgets_07.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_fgets_67b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_67a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_11.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_05.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fgets_63a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_63b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_64b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_64a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE126_Buffer_Overread__CWE129_fgets_51a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_51b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_rand_08.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_21.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_15.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_31.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_strncpy_05.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE126_Buffer_Overread__CWE170_char_memcpy_11.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE126_Buffer_Overread__CWE129_rand_09.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE170_char_strncpy_09.c
 *    GoodSink: Copy a string using strncpy() with explicit null termination

 *    BadSink : Copy a string using strncpy() without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_fscanf_07.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE170_wchar_t_memcpy_07.c
 *    GoodSink: Copy a string using memcpy with explicit null termination

 *    BadSink : Copy a string using memcpy without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_listen_socket_05.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fscanf_11.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE129_listen_socket_10.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_63a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_63b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_fgets_42.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_listen_socket_18.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_67b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_connect_socket_67a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE126_Buffer_Overread__CWE129_connect_socket_07.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_51a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fscanf_51b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE126_Buffer_Overread__CWE170_char_loop_08.c
 *    GoodSink: Copy a string using a loop with explicit null termination

 *    BadSink : Copy a string using a loop without explicit null termination



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fgets_22a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_fgets_22b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_66b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE126_Buffer_Overread__CWE129_rand_66a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_declare_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__char_alloca_loop_16.c
 * BadSource:  Set data pointer to a small buffer

 * GoodSource: Set data pointer to a large buffer

 *    BadSink : Copy data to string using a loop



########
CWE124_Buffer_Underwrite__wchar_t_alloca_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE126_Buffer_Overread__CWE129_fscanf_15.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE124_Buffer_Underwrite__wchar_t_declare_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__wchar_t_declare_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_14.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_52c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_52b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_52a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_05.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__listen_socket_10.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_10.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_12.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE123_Write_What_Where_Condition__connect_socket_04.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_32.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_11.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_34.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE123_Write_What_Where_Condition__listen_socket_15.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE123_Write_What_Where_Condition__listen_socket_45.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53d.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_53c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_declare_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_65a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_65b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__fgets_64a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_64b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_12.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_02.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__char_declare_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_61a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_61b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__listen_socket_11.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_53d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_53b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_53c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_53a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__connect_socket_22b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_22a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_63b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_63a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE123_Write_What_Where_Condition__fgets_03.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_65a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_66a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_66b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_66b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_66a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_17.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_54e.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_54c.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_54b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_54d.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_54a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_65a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_65b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_12.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__char_alloca_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__fgets_02.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_45.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__listen_socket_61a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_61b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53d.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_53b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_declare_loop_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__fgets_67b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_67a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_68a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_68b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE123_Write_What_Where_Condition__listen_socket_41.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_68a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_68b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_12.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_68a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_68b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_01.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_10.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_68b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_68a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_61a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_61b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_41.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_12.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__listen_socket_05.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__listen_socket_63a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_63b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_42.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fgets_54b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_54a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_54c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_54d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_54e.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__connect_socket_54b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_54d.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_54e.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_54c.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_54a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_22a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_22b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_41.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_34.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_52a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_52c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_52b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__CWE839_fscanf_01.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE123_Write_What_Where_Condition__connect_socket_31.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE123_Write_What_Where_Condition__connect_socket_53b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_53d.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_53a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_53c.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__CWE839_fscanf_53d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_53c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_53a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_53b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__listen_socket_07.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_cpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__connect_socket_66b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_66a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_04.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_22a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_22b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_06.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_67b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_67a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_04.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_32.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_52b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_52c.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_52a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__connect_socket_07.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_18.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_66b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_66a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_17.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_13.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_45.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_01.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_17.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_52b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_52c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_52a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_16.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_14.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_03.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_14.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_06.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__listen_socket_67b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_67a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_13.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fgets_66b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_66a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_63b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_63a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_13.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_fscanf_02.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_54c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_54b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_54a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_54e.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_54d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_11.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_51b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_51a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__CWE839_fgets_03.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_44.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__fgets_11.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_42.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_61a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_61b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_02.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_63a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_63b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fscanf_13.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_65a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_65b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__fgets_21.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_cpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_08.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__char_alloca_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_34.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_52c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_52a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_52b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_14.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__char_declare_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__connect_socket_03.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_04.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_fscanf_31.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_02.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_cpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_45.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_08.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_51a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_51b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__connect_socket_01.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_67a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_67b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_declare_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_68b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_68a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_03.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_09.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_06.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53d.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_53c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__connect_socket_11.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_68b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_68a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_32.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_03.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_cpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__fgets_53b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_53a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_53d.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_53c.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_cpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_44.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_53a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_53d.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_53c.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_53b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_09.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__listen_socket_51a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_51b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_64a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_64b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_21.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_34.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_54e.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_54c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_54a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_54d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_54b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_14.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_16.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_68a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_68b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE123_Write_What_Where_Condition__fgets_18.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_66a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__fgets_16.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__listen_socket_42.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__char_alloca_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__listen_socket_18.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_cpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE123_Write_What_Where_Condition__fgets_32.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__fgets_07.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_63b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_63a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__fgets_08.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_18.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__connect_socket_45.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_18.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__fgets_15.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_31.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_45.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54d.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_54e.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE123_Write_What_Where_Condition__listen_socket_64a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_64b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE123_Write_What_Where_Condition__connect_socket_65a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_65b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__connect_socket_10.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_16.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_16.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_10.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_41.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_44.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_22b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_22a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_65b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_65a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fscanf_41.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_06.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_05.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_16.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_17.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_31.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_09.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_64a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_53b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_53c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_53a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_53d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__fgets_04.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_15.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_03.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_cpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__fgets_01.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_63a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_63b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_44.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_17.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_02.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_51b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_51a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__listen_socket_21.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_18.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_66b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_66a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__fgets_09.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_18.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_34.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_14.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_06.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__char_alloca_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_07.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_12.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list

 * both branches use the GoodSource */



########
CWE123_Write_What_Where_Condition__fgets_42.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_41.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_34.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_52c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_52b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_52a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__fgets_34.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_09.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_32.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_44.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_22b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_22a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_04.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_loop_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__listen_socket_44.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fgets_10.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_01.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE123_Write_What_Where_Condition__fgets_06.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_63b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_63a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_16.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_15.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__listen_socket_65b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_65a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__CWE839_fscanf_05.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_61b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_61a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__char_alloca_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_declare_cpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__listen_socket_17.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_13.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_08.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_52b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_52a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_52c.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_09.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_05.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_63b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_63a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE123_Write_What_Where_Condition__connect_socket_17.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_68a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_68b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_loop_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__listen_socket_01.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_51b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_51a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54e.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54d.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_54a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_fscanf_66a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_66b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_08.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_52b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_52a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_52c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_fgets_64a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_64b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_52a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_52b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_52c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_65b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_65a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54d.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54c.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54e.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_54a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_declare_loop_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_14.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_45.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_51b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_51a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_51a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_51b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_31.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__char_declare_loop_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_66a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_66b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_65a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_65b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_06.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_61a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_61b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_64a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_64b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__char_declare_loop_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fgets_22a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_22b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_09.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__char_alloca_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE124_Buffer_Underwrite__char_alloca_loop_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE123_Write_What_Where_Condition__connect_socket_44.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_31.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_32.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_42.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__connect_socket_21.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_67b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_67a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__connect_socket_42.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_21.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_cpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_67b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_67a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_declare_cpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_05.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_64b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_64a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_13.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE123_Write_What_Where_Condition__connect_socket_67a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_67b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_cpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__listen_socket_52c.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_52b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_52a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_loop_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_fgets_53c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_53d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_53a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_53b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_08.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_54d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_54b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_54a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_54c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_54e.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_63b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_63a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_cpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__listen_socket_08.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_61a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_61b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__char_alloca_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_07.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_64b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_64a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__CWE839_fscanf_67b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_67a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_11.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_05.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_31.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_63a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_63b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_64a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_64b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_61a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_61b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_54a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_54d.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_54c.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_54b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_54e.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_41.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_02.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_51a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_51b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_68a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_68b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_fgets_21.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_65b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_65a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_15.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_22b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcpy



########
CWE123_Write_What_Where_Condition__fgets_51b.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__fgets_51a.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__char_alloca_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strncpy



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_07.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_13.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_declare_cpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_loop_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__listen_socket_12.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cat_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscat



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_11.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__fgets_10.c
 * BadSource: fgets Overwrite linked list pointers using fgets

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE124_Buffer_Underwrite__char_alloca_loop_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_memcpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memcpy



########
CWE123_Write_What_Where_Condition__connect_socket_32.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fscanf_42.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_loop_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_loop_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__char_alloca_cpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_alloca_cpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using strcpy



########
CWE124_Buffer_Underwrite__char_declare_loop_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE123_Write_What_Where_Condition__listen_socket_68b.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__listen_socket_68a.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_67b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fgets_67a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_66b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_66a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE123_Write_What_Where_Condition__listen_socket_04.c
 * BadSource: listen_socket Overwrite linked list pointers using a listen socket (server side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_fgets_07.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_51a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_51b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_67a.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE122_Heap_Based_Buffer_Overflow__sizeof_double_67b.c
 * BadSource:  Initialize the source buffer using the size of a pointer

 * GoodSource: Initialize the source buffer using the size of the DataElementType

 *    BadSink : Print then free data



########
CWE124_Buffer_Underwrite__char_alloca_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE124_Buffer_Underwrite__char_alloca_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_wchar_t_cpy_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcscpy



########
CWE124_Buffer_Underwrite__CWE839_fscanf_22b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__CWE839_fscanf_22a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE124_Buffer_Underwrite__char_alloca_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using memmove



########
CWE123_Write_What_Where_Condition__connect_socket_15.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__char_declare_loop_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy string to data using a loop



########
CWE124_Buffer_Underwrite__CWE839_listen_socket_15.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE123_Write_What_Where_Condition__connect_socket_64b.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE123_Write_What_Where_Condition__connect_socket_64a.c
 * BadSource: connect_socket Overwrite linked list pointers using a connect socket (client side)

 * GoodSource: Don't overwrite linked list pointers

 *    BadSink : Remove element from list



########
CWE124_Buffer_Underwrite__CWE839_connect_socket_21.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Non-negative but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the lower bound



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_32.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_53b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_53c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_53d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_53a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_08.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_15.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_06.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_17.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_52b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_52a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_52c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_45.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_10.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_13.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_31.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_12.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy

 * both branches use the GoodSource */



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_41.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_18.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_68a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_68b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_16.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_09.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_34.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_03.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_14.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_63b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_63a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_44.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_04.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_11.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_51a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_51b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_66a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_66b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_01.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_05.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_67b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_67a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_54b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_54d.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_54e.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_54c.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_54a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_64b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_memmove_64a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memmove



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_02.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_65a.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_memcpy_65b.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using memcpy



########
CWE127_Buffer_Underread__wchar_t_declare_ncpy_07.c
 * BadSource:  Set data pointer to before the allocated memory buffer

 * GoodSource: Set data pointer to the allocated memory buffer

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_51a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_51b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_ncpy_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcsncpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memmove_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_52b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_52a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_52c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_67a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_67b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_cpy_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using wcscpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_65a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_65b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54e.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_54b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memmove_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memmove()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_66a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_66b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncat_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_63a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_63b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_64b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_memcpy_64a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy string to data using memcpy()



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_ncpy_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53d.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53c.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_53b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_68a.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE193_wchar_t_loop_68b.c
 * BadSource:  Allocate memory for a string, but do not allocate space for NULL terminator

 * GoodSource: Allocate enough memory for a string and the NULL terminator

 *    BadSink : Copy array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_68a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_68b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54e.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_54b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54e.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_54b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_53d.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_66a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_66b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_52b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_52c.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_52a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_65b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_65a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_51b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_51a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_63b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_63a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_67a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_67b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_65b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_65a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_64b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_52c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_52a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_52b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_64b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_64a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53c.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53d.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_53b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memcpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_13.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_memmove_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_67a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_67b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_34.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_41.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_07.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_66b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_66a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_32.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_16.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_17.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memcpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_18.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_08.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_17.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_02.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_12.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_09.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_08.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_61a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cat_61b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_09.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_05.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_02.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_21.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memcpy_18.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_04.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_07.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_06.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_03.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_68a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_68b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cat_15.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_13.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_14.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_wchar_t_cpy_16.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcscpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_10.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memcpy_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_12.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop

 * both branches use the GoodSource */



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_11.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_51a.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_51b.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncpy_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_44.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_snprintf_03.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_01.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_ncat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_45.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_loop_44.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_snprintf_42.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_05.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_04.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncpy_41.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_memmove_15.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_loop_34.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_dest_char_cpy_11.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using strcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_loop_31.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_01.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy twoIntsStruct array to data using memcpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_42.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_wchar_t_loop_32.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using a loop



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncpy_45.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncpy



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_14.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_ncat_06.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using wcsncat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_22a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_22b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy int array to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_10.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strcat



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_memmove_21.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using memmove



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_63b.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using swprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE805_wchar_t_snprintf_63a.c
 * BadSource:  Allocate using malloc() and set data pointer to a small buffer

 * GoodSource: Allocate using malloc() and set data pointer to a large buffer

 *    BadSink : Copy string to data using snprintf



########
CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_ncat_31.c
 * BadSource:  Initialize data as a large string

 * GoodSource: Initialize data as a small string

 *    BadSink : Copy data to string using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_17.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_17.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_66b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_52a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_31.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_08.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_10.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_09.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_31.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_01.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_05.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_31.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_11.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_15.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_32.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_17.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_34.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_64b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_44.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_09.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_63a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_32.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_22a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_18.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_53a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_64a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_13.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_64a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_66b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_09.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_41.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_06.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_03.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_21.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_68a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_34.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_52c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_63b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_61b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_15.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_22a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54e.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_54d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_11.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_54e.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_06.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_18.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_05.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_61b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_11.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_68b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_68a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_32.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_12.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_21.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_52a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_12.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_51a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_10.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_05.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_11.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_52b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_09.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_64b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_53c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_18.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_13.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_21.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_01.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_65a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_16.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_06.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_67b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_42.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_65a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_09.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_08.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_05.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54e.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_54b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_41.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_04.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_06.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_03.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_14.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_17.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_02.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54d.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54e.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_54c.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_41.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_64b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_31.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_42.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_04.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_45.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_41.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_32.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_63b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_03.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_21.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_34.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_09.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_12.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_31.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_66b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_64a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_14.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_18.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_53d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_12.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_22a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_32.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_51a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_07.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_10.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_08.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_10.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_53b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_15.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_45.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_02.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_65b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_07.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_67a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_11.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_07.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_63b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_11.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_15.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_61b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_64b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_34.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_67a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_67a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_13.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_08.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_63b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_63a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_10.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_08.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_14.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_18.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_65a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_34.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_13.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_16.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_02.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_05.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_10.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_52b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_21.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54e.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_54a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_10.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_09.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_02.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_17.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_04.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_52c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_12.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_51b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_45.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_04.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_13.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_04.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_22b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_42.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_04.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_31.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_15.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_07.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_15.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_34.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_02.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_02.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_11.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_14.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_06.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_03.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_44.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_63b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_11.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_61a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_02.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_03.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_03.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_07.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_61b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_01.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_14.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_18.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_01.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_64a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_67b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_65a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_45.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54d.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_54e.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_14.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_03.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_63b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_66b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_05.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_04.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_16.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_04.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_10.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_67b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_16.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_68b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_13.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_10.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_51b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_31.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_68a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_17.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_53b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_08.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_06.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_31.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_65a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_66b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_14.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_18.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_02.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_01.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_34.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_66b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_22a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_51b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_64a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_17.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_44.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_03.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_52b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_67b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_14.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_41.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54e.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54c.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_54d.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_16.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_51b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_41.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_44.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_11.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_17.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_34.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_65b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54e.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_54a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_15.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53c.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_53d.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_16.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_07.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_61b.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE135_61a.c
 * BadSource:  Void pointer to a wchar_t array

 * GoodSource: Void pointer to a char array

 *    GoodSink: Allocate memory using wcslen() and copy data

 *    BadSink : Allocate memory using strlen() and copy data



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_41.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_67a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54e.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54d.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_54b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_22b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_15.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_14.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_02.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_06.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_45.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_31.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_08.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53d.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_53c.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_01.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_52c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_07.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53d.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_53c.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_08.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_12.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_65b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_42.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_08.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_67b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_05.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_09.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_07.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_02.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_03.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_65b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_12.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_66a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_13.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_04.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_17.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_18.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_41.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_21.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_01.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_18.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_45.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_68b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_45.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_09.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_44.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_63a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_16.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68b.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_68a.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_44.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_42.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_66a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_32.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_16.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_05.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_34.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_01.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_07.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_15.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_44.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52c.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_52a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memmove()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_45.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_51b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68b.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_68a.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_45.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66a.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_66b.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51b.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_51a.c
 * BadSource: connect_socket Read data using a connect socket (client side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53c.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_53d.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51a.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_51b.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_32.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_04.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61a.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_61b.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_rand_13.c
 * BadSource: rand Set data to result of rand(), which may be zero

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_cpy_01.c
 * BadSource:  Point data to a buffer that does not have space for a NULL terminator

 * GoodSource: Point data to a buffer that includes space for a NULL terminator

 *    BadSink : Copy string to data using strcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_13.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fscanf_42.c
 * BadSource: fscanf Read data from the console using fscanf()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68b.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_68a.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_16.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_large_06.c
 * BadSource: large Large index value that is greater than 10-1

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_41.c
 * BadSource:  Allocate memory without using sizeof(int)

 * GoodSource: Allocate memory using sizeof(int)

 *    BadSink : Copy array to data using memcpy()



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_listen_socket_01.c
 * BadSource: listen_socket Read data using a listen socket (server side)

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_05.c
 * BadSource: fgets Read data from the console using fgets()

 * GoodSource: Larger than zero but less than 10

 *    GoodSink: Ensure the array index is valid

 *    BadSink : Improperly check the array index by not checking the upper bound



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_09.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_52a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_52b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_52c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_loop_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_32.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_snprintf_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_51b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncat_51a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncat



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_05.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_07.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_14.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_10.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_41.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_53a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_53c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_53b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_53d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_16.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_02.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_08.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_04.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_44.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_loop_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_ncpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_03.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_65b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_65a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_63b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_63a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memmove_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_64a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memmove_64b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_31.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_06.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_01.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_memcpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_13.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_declare_memcpy_12.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memcpy

 * both branches use the GoodSource */



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_ncpy_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using strncpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_66b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_snprintf_66a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using snprintf



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memmove_45.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_34.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_67a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_67b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_54e.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_54a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_54d.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_54c.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_memmove_54b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using memmove



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_68a.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_68b.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_char_declare_memcpy_18.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy string to data using memcpy



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_15.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_declare_loop_11.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int64_t array to data using a loop



########
CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c
 * BadSource:  Set data pointer to the bad buffer

 * GoodSource: Set data pointer to the good buffer

 *    BadSink : Copy int array to data using a loop



########
